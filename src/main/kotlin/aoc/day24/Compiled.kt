package aoc.day24

abstract class Input {
    abstract fun next(): Long
}
fun calc(input: Input): AluState {
    var w = input.next()
    var x = 0L
    var y = 0L
    var z = 0L
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 13)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 14)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 12)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 8)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 11)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 5)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, 0)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 4)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 15)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 10)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, -13)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 13)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 10)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 16)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, -9)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 5)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 11)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 6)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 1)
    x = add(x, 13)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 13)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, -14)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 6)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, -3)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 7)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, -2)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 13)
    y = mul(y, x)
    z = add(z, y)
    w = input.next()
    x = mul(x, 0)
    x = add(x, z)
    x = mod(x, 26)
    z = div(z, 26)
    x = add(x, -14)
    x = eql(x, w)
    x = eql(x, 0)
    y = mul(y, 0)
    y = add(y, 25)
    y = mul(y, x)
    y = add(y, 1)
    z = mul(z, y)
    y = mul(y, 0)
    y = add(y, w)
    y = add(y, 3)
    y = mul(y, x)
    z = add(z, y)
    return AluState(w, x, y, z)
}

private inline fun mul(a: Long, b: Long): Long = a * b
private inline fun add(a: Long, b: Long): Long = a + b
private inline fun div(a: Long, b: Long): Long = a / b
private inline fun mod(a: Long, b: Long): Long = a % b
private inline fun eql(a: Long, b: Long): Long = if (a == b) 1 else 0